# Функция tuple()
# Встроенная функция list() может применяться для преобразования кортежа в список.
number_tuple = (1, 2, 3, 4, 5)
number_list = list(number_tuple)
print(number_list)  # [1, 2, 3, 4, 5]

# Встроенная функция tuple() может применяться для преобразования списка в кортеж.
str_list = ['один', 'два', 'три']
str_tuple = tuple(str_list)
print(str_tuple)  # ('один', 'два', 'три')

# Аналогичным образом мы можем создать кортеж на основании строки.
text = 'hello python'
str_tuple = tuple(text)
print(str_tuple)  # ('h', 'e', 'l', 'l', 'o', ' ', 'p', 'y', 't', 'h', 'o', 'n')
# Обратите внимание, что символ пробел содержится в кортеже str_tuple.

# Преобразование строки в список позволяет получить список символов строки. Это может быть полезно, например, когда надо
# изменить один символ строки:
s = 'симпотичный'
print(s)        # симпотичный
a = list(s)
a[4] = 'а'
s = ''.join(a)
print(s)        # симпатичный

# С этой же целью может потребоваться преобразование кортежа в список:
writer = ('Лев Толстой', 1827)
print(writer)   # ('Лев Толстой', 1827)
a = list(writer)
a[1] = 1828
writer = tuple(a)
print(writer)   # ('Лев Толстой', 1828)


# Особенности кортежей
# Кортежи поддерживают те же операции, что и списки, за исключением изменяющих содержимое.
# Кортежи поддерживают:
#   - доступ к элементу по индексу (только для получения значений элементов);
#   - методы, в частности index(), count();
#   - встроенные функции, в частности len(), sum(), min() и max();
#   - срезы;
#   - оператор принадлежности in;
#   - операторы конкатенации (+) и повторения (*).

# Функция len()
# Длиной кортежа называется количество его элементов. Для того, чтобы посчитать длину кортежа мы используем встроенную
# функцию len().
numbers = (2, 4, 6, 8, 10)
languages = ('Python', 'C#', 'C++', 'Java')
print(len(numbers))      # 5 выводим длину кортежа numbers
print(len(languages))    # 4 выводим длину кортежа languages
print(len(('apple', 'banana', 'cherry')))   # 3 выводим длину кортежа, состоящего из 3 элементов

# Оператор принадлежности in
# Оператор in позволяет проверить, содержит ли кортеж некоторый элемент.
numbers = (2, 4, 6, 8, 10)
if 2 in numbers:
    print('Кортеж numbers содержит число 2')
else:
    print('Кортеж numbers не содержит число 2')

# Мы можем использовать оператор in вместе с логическим оператором not.
numbers = (2, 4, 6, 8, 10)
if 0 not in numbers:
    print('Кортеж numbers не содержит нулей')

# Индексация
# При работе со списками (строками) мы использовали индексацию, то есть обращение к конкретному элементу списка (строки)
# по его индексу. Аналогично можно индексировать и элементы кортежей.
# Для индексации кортежей в Python используются квадратные скобки [], в которых указывается индекс (номер) нужного
# элемента в кортеже.
numbers = (2, 4, 6, 8, 10)

# Как и в списках, попытка обратиться к элементу кортежа по несуществующему индексу:
# print(numbers[17])  # IndexError: tuple index out of range

# Срезы
numbers = (2, 4, 6, 8, 10)
# С помощью среза мы можем получить несколько элементов кортежа, создав диапазон индексов разделенных двоеточием
# numbers[x:y].
print(numbers[1:3])  # (4, 6)
print(numbers[2:5])  # (6, 8, 10)

# При построении среза numbers[x:y] первое число – это то место, где начинается срез (включительно), а второе – это
# место, где заканчивается срез (не включительно).

# При использовании срезов с кортежами мы также можем опускать второй параметр в срезе numbers[x:]
# (но поставить двоеточие), тогда срез берется до конца кортежа. Аналогично если опустить первый параметр numbers[:y],
# то можно взять срез от начала кортежа.

# Срез numbers[:] возвращает копию исходного кортежа.
# Как и в списках, можно использовать отрицательные индексы в срезах кортежей.

# Операция конкатенации + и умножения на число *
# Операторы + и * применяют для кортежей как и для списков.
print((1, 2, 3, 4) + (5, 6, 7, 8))  # (1, 2, 3, 4, 5, 6, 7, 8)
print((7, 8) * 3)                   # (7, 8, 7, 8, 7, 8)
print((0,) * 10)                    # (0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

# Для генерации кортежей, состоящих строго из повторяющихся элементов, умножение на число — самый короткий и правильный
# путь.
# Расширенные операторы += и *= также можно использовать при работе с кортежами.
a = (1, 2, 3, 4)
b = (7, 8)
a += b    # добавляем к кортежу a кортеж b
b *= 5    # повторяем кортеж b 5 раз
print(a)  # (1, 2, 3, 4, 7, 8)
print(b)  # (7, 8, 7, 8, 7, 8, 7, 8, 7, 8)

# Встроенные функции sum(), min(), max()
# Встроенная функция sum() принимает в качестве параметра кортеж чисел и вычисляет сумму его элементов.
numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print('Сумма всех элементов кортежа =', sum(numbers))  # Сумма всех элементов кортежа = 55

# Встроенные функции min() и max() принимают в качестве параметра кортеж и находят минимальный и максимальный элементы
# соответственно.
numbers = (3, 4, 10, 3333, 12, -7, -5, 4)
print('Минимальный элемент кортежа =', min(numbers))   # Минимальный элемент кортежа = -7
print('Максимальный элемент кортежа =', max(numbers))  # Максимальный элемент кортежа = 3333

# Функции min() и max() можно применять только к кортежам с одним типом данных. Если кортеж содержит разные типы данных,
# скажем целое число (int) и строку (str), то во время выполнения программы произойдет ошибка.

# Метод index()
# Метод index() возвращает индекс первого элемента, значение которого равняется переданному в метод значению.
# Таким образом, в метод передается один параметр:
#   value: значение, индекс которого требуется найти.
# Если элемент в кортеже не найден, то во время выполнения происходит ошибка.
names = ('Gvido', 'Roman' , 'Timur')
position = names.index('Timur')
print(position)  # 2

names = ('Gvido', 'Roman' , 'Timur')
position = names.index('Anders')
# print(position)  # ValueError: tuple.index(x): x not in tuple

# Чтобы избежать таких ошибок, можно использовать метод index() вместе с оператором принадлежности in:
names = ('Gvido', 'Roman' , 'Timur')
if 'Anders' in names:
    position = names.index('Anders')
    print(position)
else:
    print('Такого значения нет в кортеже')

# Метод count()
# Метод count() возвращает количество элементов в кортеже, значения которых равны переданному в метод значению.
# Таким образом, в метод передается один параметр:
#     value: значение, количество элементов, равных которому,  нужно посчитать.
# Если значение в кортеже не найдено, то метод возвращает 0.
names = ('Timur', 'Gvido', 'Roman', 'Timur', 'Anders', 'Timur')
cnt1 = names.count('Timur')
cnt2 = names.count('Gvido')
cnt3 = names.count('Josef')
print(cnt1)  # 3
print(cnt2)  # 1
print(cnt3)  # 0

# Кортежи не поддерживают такие методы, как append(), remove(), pop(), insert(), reverse(), sort(), так как они изменяют
# содержимое.

# Вложенные кортежи
# Подобно спискам, мы можем создавать вложенные кортежи.
colors = ('red', ('green', 'blue'), 'yellow')
numbers = (1, 2, (4, (6, 7, 8, 9)), 10, 11)
print(colors[1][1])      # blue
print(numbers[2][1][3])  # 9
