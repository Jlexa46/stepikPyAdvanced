# Операции над множествами
# Основные операции над множествами:
#     * объединение множеств;
#     * пересечение множеств;
#     * разность множеств;
#     * симметрическая разность множеств.
# Для каждой операции есть метод и оператор.

# Объединение множеств: метод union()
# Объединение множеств это множество, состоящее из элементов, принадлежащих хотя бы одному из объединяемых множеств.
# Для этой операции существует метод union().
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset3 = myset1.union(myset2)
print(myset3)  # {1, 2, 3, 4, 5, 6, 7, 8}

# Обратите внимание, метод union() возвращает новое множество в которое входят все элементы множеств myset1 и myset2.
# Для изменения текущего множества используется метод update().

# Для объединения двух множеств можно также использовать оператор |.
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset3 = myset1 | myset2
print(myset3)  # {1, 2, 3, 4, 5, 6, 7, 8}


# Пересечение множеств: метод intersection()
# Пересечение множеств это множество, состоящее из элементов, принадлежащих одновременно каждому из пересекающихся
# множеств. Для этой операции существует метод intersection().
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset3 = myset1.intersection(myset2)
print(myset3)  # {3, 4}

# Обратите внимание, метод intersection() возвращает новое множество в которое входят общие элементы множеств myset1 и
# myset2. Для изменения текущего множества используется метод intersection_update().

# Для пересечения двух множеств можно также использовать оператор &.
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset3 = myset1 & myset2
print(myset3)  # {3, 4}


# Разность множеств: метод difference()
# Разность множеств это множество, в которое входят все элементы первого множества, не входящие во второе множество.
# Для этой операции существует метод difference().
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset3 = myset1.difference(myset2)
print(myset3)  # {1, 2, 5}

# Для разности двух множеств можно также использовать оператор -.
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset3 = myset1 - myset2
print(myset3)  # {1, 2, 5}

# Обратите внимание: для операции разности множеств важен порядок, в котором указаны множества. Если поменять местами
# myset1 и myset2, нас ожидает совсем другой результат: элементы входящие в множество myset2 и которых нет в множестве
# myset1.
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset3 = myset2.difference(myset1)
print(myset3)  # {8, 6, 7}


# Симметрическая разность: метод symmetric_difference()
# Симметрическая разность множеств это множество, включающее все элементы исходных множеств, не принадлежащие
# одновременно обоим исходным множествам. Для этой операции существует метод symmetric_difference().
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset3 = myset1.symmetric_difference(myset2)
print(myset3)  # {1, 2, 5, 6, 7, 8}

# Для симметрической разности двух множеств можно также использовать оператор ^.
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset3 = myset1 ^ myset2
print(myset3)  # {1, 2, 5, 6, 7, 8}

# Обратите внимание: для операции симметрической разности порядок множеств не важен, на то она и симметрическая:
# myset1 ^ myset2 == myset2 ^ myset1.


# Методы множеств, изменяющие текущие множества
# Методы union(), intersection(), difference(), symmetric_difference() не изменяют исходные множества, а возвращают
# новые. Часто на практике нужно изменять исходные множества. Для таких целей используются парные методы
# update(), intersection_update(), difference_update(), symmetric_difference_update().

# Метод update()
# Метод update() изменяет исходное множество по объединению.
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset1.update(myset2)      # изменяем множество myset1
print(myset1)  # {1, 2, 3, 4, 5, 6, 7, 8}

# Аналогичный результат получается, если использовать оператор |=:
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset1 |= myset2
print(myset1)  # {1, 2, 3, 4, 5, 6, 7, 8}

# Метод intersection_update()
# Метод intersection_update() изменяет исходное множество по пересечению.
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset1.intersection_update(myset2)      # изменяем множество myset1
print(myset1)  # {3, 4}

# Аналогичный результат получается, если использовать оператор &=:
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset1 &= myset2
print(myset1)  # {3, 4}

# Метод difference_update()
# Метод difference_update() изменяет исходное множество по разности.
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset1.difference_update(myset2)      # изменяем множество myset1
print(myset1)  # {1, 2, 5}

# Аналогичный результат получается, если использовать оператор -=:
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset1 -= myset2
print(myset1)  # {1, 2, 5}

# Метод symmetric_difference_update()
# Метод symmetric_difference_update() изменяет исходное множество по симметрической разности.
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset1.symmetric_difference_update(myset2)      # изменяем множество myset1
print(myset1)  # {1, 2, 5, 6, 7, 8}

# Аналогичный результат получается, если использовать оператор ^=:
myset1 = {1, 2, 3, 4, 5}
myset2 = {3, 4, 6, 7, 8}
myset1 ^= myset2
print(myset1)  # {1, 2, 5, 6, 7, 8}


# Примечания
# Примечание 1. Все основные операции над множествами выполнятся двумя способами: при помощи метода или соответствующего
# ему оператора. Различие в том, что метод может принимать в качестве аргумента не только множество (тип данных set),
# но и любой итерируемый объект (список, строку, кортеж).
mylist = [2021, 2020, 2019, 2018, 2017, 2016]
mytuple = (2021, 2020, 2016)
mystr = 'abcd'
myset = {2009, 2010, 2016}
print(myset.union(mystr))              # объединяем со строкой
print(myset.intersection(mylist))      # пересекаем со списком
print(myset.difference(mytuple))       # находим разность с кортежем


mylist = [2021, 2020, 2019, 2018, 2017, 2016]
mytuple = (2021, 2020, 2016)
mystr = 'abcd'
myset = {2009, 2010, 2016}
# print(myset | mystr)      # TypeError: unsupported operand type(s) for |: 'set' and 'str'
# print(myset & mylist)     # TypeError: unsupported operand type(s) for &: 'set' and 'list'
# print(myset - mytuple)    # TypeError: unsupported operand type(s) for -: 'set' and 'tuple'

# Примечание 2. Некоторые методы (union(), intersection(), difference()) и операторы (|, &, -, ^) позволяют совершать
# операции над несколькими множествами сразу.
myset1 = {1, 2, 3, 4, 5, 6}
myset2 = {2, 3, 4, 5}
myset3 = {5, 6, 7, 8}
union1 = myset1.union(myset2, myset3)
union2 = myset1 | myset2 | myset3
difference1 = myset1.difference(myset2, myset3)
difference2 = myset1 - myset2 - myset3            # порядок выполнения слева-направо
print(union1 == union2)             # True
print(difference1 == difference2)   # True

# Примечание 3. Оператор ^ симметрической разности позволяет использовать несколько множеств, а метод symmetric_difference() – нет.
myset1 = {1, 2, 3, 4, 5, 6}
myset2 = {2, 3, 4, 7}
myset3 = {6, 20, 30}
symdifference = myset1 ^ myset2 ^ myset3  # порядок выполнения слева-направо
print(symdifference)    # {1, 5, 7, 20, 30}


myset1 = {1, 2, 3, 4, 5, 6}
myset2 = {2, 3, 4, 7}
myset3 = {6, 20, 30}
symdifference = myset1.symmetric_difference(myset2, myset3)
# print(symdifference)  # TypeError: symmetric_difference() takes exactly one argument (2 given)

# Примечание 4. Таблица соответствия методов и операторов над множествами.
# A | B             Возвращает множество, являющееся объединением множеств A и B
# A.union(B)

# A |= B            Добавляет в множество A все элементы из множества B
# A.update(B)

# A & B             Возвращает множество, являющееся пересечением множеств A и B
# A.intersection(B)

# A &= B            Оставляет в множестве A только те элементы, которые есть в множестве B
# A.intersection_update(B)

# A - B             Возвращает разность множеств A и B
# A.difference(B)

# A -= B            Удаляет из множества A все элементы, входящие в B
# A.difference_update(B)

# A ^ B             Возвращает симметрическую разность множеств A и B
# A.symmetric_difference(B)

# A ^= B            Записывает в A симметрическую разность множеств A и B
# A.symmetric_difference_update(B)

# Примечание 5. Приоритет операторов в порядке убывания (верхние операторы имеют более высокий приоритет, чем нижние)
# имеет вид:
# Оператор	Описание
#     -	    разность
#     &	    пересечение
#     ^	    симметрическая разность
#     |	    объединение

# Тут можно посмотреть про операторы и их приоритеты в Python.
# https://docs.python.org/3/reference/expressions.html#operator-precedence
