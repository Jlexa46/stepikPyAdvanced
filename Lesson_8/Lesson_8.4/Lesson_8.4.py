# Основы работы с множествами
# Работа с множествами очень сильно напоминает работу со списками, поскольку и множества, и списки содержат отдельные
# элементы, хотя элементы множества уникальны, а списки могут содержать повторяющиеся элементы. Многое из того, что мы
# делали со списками, доступно и при работе с множествами.


# Функция len()
# Длиной множества называется количество его элементов. Чтобы посчитать длину множества используют встроенную функцию
# len() (от слова length – длина).
myset1 = {2, 2, 4, 6, 6}
myset2 = set([1, 2, 2, 3, 3, 4, 4, 5, 5])
myset3 = set('aaaaabbbbccccddd')
print(len(myset1))  # 3
print(len(myset2))  # 5
print(len(myset3))  # 4


# Оператор принадлежности in
# Оператор in позволяет проверить, содержит ли множество некоторый элемент.
numbers = {2, 4, 6, 8, 10}
if 2 in numbers:
    print('Множество numbers содержит число 2')
else:
    print('Множество numbers не содержит число 2')

# Мы можем использовать оператор in вместе с логическим оператором not. Например
numbers = {2, 4, 6, 8, 10}
if 0 not in numbers:
    print('Множество numbers не содержит нулей')

# Оператор принадлежности in работает очень быстро на множествах, намного быстрее чем на списках. Поэтому если требуется
# часто осуществлять поиск в коллекции уникальных данных, то множество – подходящий выбор.


# Встроенные функции sum(), min(), max()
# Встроенная функция sum() принимает в качестве аргумента множество чисел и вычисляет сумму его элементов.
numbers = {2, 2, 4, 6, 6}
print('Сумма всех элементов множества =', sum(numbers))  # Сумма всех элементов множества = 12

# Встроенные функции min() и max() принимают в качестве аргумента множество и находят минимальный и максимальный
# элементы соответственно.
numbers = {2, 2, 4, 6, 6}
print('Минимальный элемент =', min(numbers))    # Минимальный элемент = 2
print('Максимальный элемент =', max(numbers))   # Максимальный элемент = 6


# Примечания
# Примечание 1. Индексация и срезы недоступны для множеств.

# Примечание 2. Операция конкатенации + и умножения на число * недоступны для множеств.


# Перебор элементов множества
# Перебор элементов множества осуществляется точно так же, как и перебор элементов списка, то есть с помощью цикла for.
# Для вывода элементов множества каждого на отдельной строке можно использовать следующий код:
numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}
for num in numbers:
    print(num)

# Мы также можем использовать операцию распаковки множества.
numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}
print(*numbers, sep='\n')

# Не стоит забывать, что множества – неупорядоченные коллекции, поэтому полагаться на порядок вывода элементов не стоит.
# Если нужно гарантировать порядок вывода элементов (по возрастанию / убыванию), то необходимо воспользоваться
# встроенной функцией sorted(), будет гарантированно выводить элементы множества в порядке возрастания.
numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}
sorted_numbers = sorted(numbers)
print(*sorted_numbers, sep='\n')


# Сравнение множеств
# Множества можно сравнивать между собой. Равные множества имеют одинаковую длину и содержат равные элементы. Для
# сравнения множеств используются операторы == и !=.
myset1 = {1, 2, 3, 3, 3, 3}
myset2 = {2, 1, 3}
myset3 = {1, 2, 3, 4}
print(myset1 == myset2)  # True
print(myset1 == myset3)  # False
print(myset1 != myset3)  # True


# Примечания
# Примечание 1. Встроенная функция sorted() имеет опциональный параметр reverse. Если установить этот параметр в
# значение True, произойдет сортировка по убыванию.
numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}
sortnumbers = sorted(numbers, reverse=True)
print(*sortnumbers, sep='\n')

# Примечание 2. Код для работы с множествами нужно писать так, чтобы результат его выполнения не зависел от расположения
# элементов и был одинаковым при любом порядке обхода, последовательного обращения ко всем элементам.
