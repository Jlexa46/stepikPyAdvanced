# Генераторы множеств
# Пусть требуется создать множество, содержащее цифры введенного числа.
# digits = set(int(input()))  # TypeError: 'int' object is not iterable
# поскольку функция set() принимает в качестве аргумента итерируемый объект, а число (тип данных int) таковым
# не является.

# Следующий программный код:
digits = set(input())  # '1', '2', '3', '4', '5'}
# при вводе строки '12345' создает множество символов {'1', '2', '3', '4', '5'}, а не множество цифр {1, 2, 3, 4, 5}.

# Для создания требуемого множества, содержащего уникальные цифры введенного числа, нам придется написать код:
digits = set()
for c in input():
    digits.add(int(c))
# Такой код хоть и не сложен, однако достаточно громоздок.

# Для создания множеств в Python можно использовать специальный синтаксис, как при создании списка.
# Приведенный выше код можно переписать с использованием генератора множеств:
digits = {int(c) for c in input()}

# Общий вид генератора множеств следующий:
# {выражение for переменная in последовательность}
# где выражение — некоторое выражение, как правило, зависящее от использованной в списочном выражении переменной,
# которым будут заполнены элементы множества переменная — имя некоторой переменной, последовательность —
# последовательность значений, которые она принимает (любой итерируемый объект).


# Примеры использования генератора множеств
# 1. Создать множество, заполненное квадратами целых чисел от 0 до 9 можно так:
squares = {i ** 2 for i in range(10)}

# 2. Создать множество, заполненное кубами целых чисел от 10 до 20 можно так:
cubes = {i ** 3 for i in range(10, 21)}

# 3. Создать множество, заполненное символами строки можно так:
chars = {c for c in 'abcdefg'}


# Условия в генераторе множеств
# В генераторах множеств можно использовать условный оператор. Например, если требуется создать множество, заполненное
# только цифрами некоторой строки, то мы можем написать такой код:
digits = {int(d) for d in 'abcd12ef78ghj90' if d.isdigit()}


# Frozenset
# Замороженное множество (frozenset) также является встроенной коллекцией в Python. Обладая характеристиками обычного
# множества, замороженное множество не может быть изменено после создания.
# Кортеж (тип tuple) – неизменяемая версия списка (тип list), а замороженное множество (тип frozenset) – неизменяемая
# версия обычного множества (тип set).

# Для создания замороженного множества используется встроенная функция frozenset(), которая принимает в качестве
# аргумента другую коллекцию.
myset1 = frozenset({1, 2, 3})                         # на основе множества
myset2 = frozenset([1, 1, 2, 3, 4, 4, 4, 5, 6, 6])    # на основе списка
myset3 = frozenset('aabcccddee')                      # на основе строки
print(myset1)   # frozenset({1, 2, 3})
print(myset2)   # frozenset({1, 2, 3, 4, 5, 6})
print(myset3)   # frozenset({'e', 'd', 'c', 'b', 'a'})


# Операции над замороженными множествами
# Над замороженными множествами можно производить все операции, которые можно производить над обычными множествами:
#     * объединение множеств: метод union() или оператор |;
#     * пересечение множеств: метод intersection() или оператор &;
#     * разность множеств: метод difference() или оператор -;
#     * симметрическая разность множеств: метод symmetric_difference() или оператор ^.
myset1 = frozenset('hello')
myset2 = frozenset('world')
print(myset1 | myset2)  # frozenset({'l', 'w', 'e', 'h', 'r', 'd', 'o'})
print(myset1 & myset2)  # frozenset({'l', 'o'})
print(myset1 ^ myset2)  # frozenset({'d', 'h', 'w', 'e', 'r'})

# Результатом операций над замороженными множествами будут тоже замороженные множества.

# Примечания
# Примечание 1. Будучи изменяемыми, обычные множества не могут быть элементами других множеств. Замороженные множества
# являются неизменяемыми, а значит могут быть элементами других множеств.
sentence = 'The cat in the hat had two sidekicks, thing one and thing two.'
words = sentence.lower().replace('.', '').replace(',', '').split()
vowels = ['a', 'e', 'i', 'o', 'u']
consonants = {frozenset({letter for letter in word if letter not in vowels}) for word in words}
print(*consonants, sep='\n')

# Примечание 2. Методы изменяющие множество отсутствуют у замороженных множеств:
#     add()
#     remove()
#     discard()
#     pop()
#     clear()
#     update()
#     intersection_update()
#     difference_update()
#     symmetric_difference_update()

# Примечание 3. Мы можем сравнивать простые (тип set) и замороженные множества (тип frozenset).
myset1 = set('qwerty')
myset2 = frozenset('qwerty')
print(myset1 == myset2)     # True
