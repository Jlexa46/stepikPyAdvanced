# Поднятие и опускание пера
# Исходная роботизированная черепашка, использованная преподавателем Сеймуром Пейпертом, лежала на большом листе бумаги
# и имела перо, которое можно было поднимать и опускать. Когда перо было опущено на бумагу, оно чертило линию во время
# перемещения черепашки. Когда перо поднималось, оно не касалось бумаги, и черепашка во время движения не оставляла за
# собой линии.
# Команда turtle.penup() поднимает перо, а команда turtle.pendown() – опускает. Когда перо поднято, черепашка
# перемещается не оставляя линии. Когда перо опущено, черепашка во время перемещения чертит линию. По умолчанию перо
# опущено.
import turtle
turtle.forward(50)
turtle.penup()
turtle.forward(25)
turtle.pendown()
turtle.forward(50)
turtle.penup()
turtle.forward(25)
turtle.pendown()
turtle.forward(50)


# Рисование кругов и точек
# Чтобы черепашка нарисовала круг, можно применить команду turtle.circle(). Такая команда рисует круг заданного в виде
# аргумента в пикселях радиуса.
# Например, команда turtle.circle(80) побуждает черепашку нарисовать круг с радиусом 80 пикселей.
import turtle
turtle.circle(80)  # изображает круг радиусом в 8080 пикселей.

# Команда turtle.dot() применяется, чтобы черепашка нарисовала точку.
import turtle
turtle.dot()
turtle.forward(50)
turtle.dot()
turtle.forward(50)
turtle.dot()
turtle.forward(50)


# Изменение размера пера
# Для изменения ширины пера черепашки в пикселях можно применить команду turtle.pensize(). Аргумент команды – целое
# число, задает ширину пера.
import turtle
turtle.pensize(5)
turtle.circle(80)


# Изменение цвета рисунка
# Для изменения цвета рисунка можно применить команду turtle.pencolor(). Аргумент команды – строковое представление
# названия цвета.
import turtle
turtle.pencolor('red')
turtle.circle(80)

# С командой turtle.pencolor() можно использовать многочисленные предопределенные названия цветов. Наиболее широко
# используемые названия цветов:
#     red (красный);
#     green (зеленый);
#     bluе (синий);
#     yellow (желтый);
#     cyan (сине-зелёный).

# Команда turtle.pencolor() позволяет работать не только с предопределенными названиями цветов, но и с цветами,
# заданными в формате RGB (Red Green Blue). В качестве аргумента команды turtle.pencolor() можно использовать либо
# кортеж из 3 чисел (r, g, b), либо просто три числа r, g, b.

# В Python 3 для того, чтобы использовать цвет в формате RGB, нужно предварительно установить значение colormode в 255,
# для этого нужно использовать команду turtle.Screen().colormode(255). Подробнее об этом можно почитать в документации.


# Изменение цвета фона
# Для изменения фонового цвета графического окна можно применить команду turtle.Screen().bgcolor(). В этом случае тоже
# можно использовать цвета с предопределенными названиями или задать цвет в RGB формате.
import turtle
turtle.Screen().bgcolor('gray')
turtle.pencolor('green')
turtle.circle(80)

# Мы также можем установить фоновое изображение с помощью команды turtle.Screen().bgpic().


# Создание штампа
# С помощью команды turtle.stamp() можно оставить штамп черепашки. Использование команды turtle.stamp() производит тот
# же эффект, что и команда turtle.dot(), но оставляет отметку в форме черепашки.
import turtle
turtle.shape('turtle')
for i in range(3):
    turtle.forward(50)
    turtle.stamp()

# При использовании команды turtle.stamp() цветом штампа будет цвет заливки или по умолчанию черный.


# Возвращение экрана в исходное состояние
# Для возвращения графического окна черепашки в исходное состояние существуют три команды:
#     turtle.clear();
#     turtle.reset();
#     turtle.clearscreen().

# Команда turtle.clear() стирает все рисунки в графическом окне. Но не меняет положение черепашки, цвет рисунка и цвет
# фона графического окна.
# Команда turtle.reset() стирает все рисунки, имеющиеся в графическом окне, задает черный цвет рисунка и возвращает
# черепашку в исходное положение в центре экрана. Эта команда не переустанавливает цвет фона графического окна.
# Команда turtle.clearscreen() стирает все рисунки в графическом окне, меняет цвет рисунка на черный, а цвет фона на
# белый, и возвращает черепашку в исходное положение в центре графического окна.


# Примечания
# Примечание 1. Для установления размера графического окна можно применить команду turtle.Screen().setup(). Аргументы
# команды – ширина и высота (в пикселях).
# Приведенный ниже код создает графическое окно шириной 640×480 пикселей:
import turtle
turtle.Screen().setup(640, 480)


# Перемещение черепашки в заданную позицию
# Для идентификации позиции каждого пикселя в графическом окне черепашки используется прямоугольная Декартова система
# координат. Каждый пиксель имеет координаты x и y. Координата x показывает горизонтальную позицию пикселя,
# координата y – вертикальную.

# Важно помнить:
#     пиксель в центре графического окна находится в позиции (0;0), его координаты x и y равны 0;
#     значения координат x увеличиваются при перемещении вправо и уменьшаются влево;
#     значения координат y увеличиваются при перемещении вверх и уменьшаются вниз;
#     пиксели, расположенные справа от центральной точки, имеют положительные координаты x, а расположенные слева от
#       центральной точки – отрицательные координаты x;
#     пиксели, расположенные выше центральной точки, имеют положительные координаты y, а расположенные ниже центральной
#       точки – отрицательные координаты y.

# Для перемещения черепашки в конкретную позицию в графическом окне применяется команда turtle.goto(). Аргументами
# служат координаты целевой позиции. Если перо черепашки опущено вниз (по умолчанию оно опущено), то будет начерчена
# линия. Приведенный ниже код нарисует прямоугольный треугольник с катетами по 100 пикселей.
import turtle
turtle.goto(0, 100)
turtle.goto(-100, 0)
turtle.goto(0, 0)

# Команды turtle.setposition() и turtle.setpos() аналогичны команде turtle.goto(). Все три команды перемещают черепашку
# в заданную позицию.


# Получение текущей позиции черепашки
# Команда turtle.pos() возвращает кортеж с xx и yy координатами черепашки.
# Приведенный ниже код перемещает черепашку из позиции (0;0) в позицию (100;150) и выводит: (100.00, 150.00)
import turtle
turtle.goto(100, 150)
position = turtle.pos()
print(position)

# Для получения только координаты x черепашки служит команда turtle.xcor(), а для получения координаты y – команда
# turtle.ycor().
# Приведенный ниже код перемещает черепашку из позиции (0;0) в позицию (200;−150) и выводит: 200 -150
import turtle
turtle.goto(200, -150)
x = turtle.xcor()
y = turtle.ycor()
print(x)
print(y)

# Команда turtle.position() аналогична команде turtle.pos(). Обе эти команды возвращают кортеж с x и y координатами
# черепашки.


# Сокрытие черепашки
# Когда не нужно, чтобы черепашка отображалась на экране, применяется команда turtle.hideturtle(), которая ее прячет.
# Эта команда не изменяет процесс создания графического изображения, она просто скрывает значок черепашки. Когда
# требуется снова вывести черепашку на экран, применяется команда turtle.showturtle().


# Управление скоростью анимации черепахи
# Для изменения скорости движения черепашки можно применить команду turtle.speed(). Аргумент команды скорость – число в
# диапазоне от 0 до 10. Если указать 0, то черепашка будет делать все свои перемещения мгновенно (анимация отключена).
import turtle
turtle.speed(0)
turtle.circle(50)

# В диапазоне от 1 до 10 самая малая скорость – 1, а самая большая – 10.
import turtle
for i in range(1, 11):
    turtle.speed(i)
    turtle.circle(100 - 10*i)














