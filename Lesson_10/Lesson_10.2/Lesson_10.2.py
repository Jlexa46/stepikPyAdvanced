# Основы работы с словарями
# Работа с словарями похожа на работу со списками, поскольку и словари, и списки содержат в качестве отдельных элементов
# пары: в словарях ключ: значение, в списках индекс: значение.


# Функция len()
# Длиной словаря называется количество его элементов. Для определения длины словаря используют встроенную функцию len()
# (от слова length – длина).
fruits = {'Apple': 70, 'Grape': 100, 'Banana': 80}
capitals = {'Россия': 'Москва', 'Франция': 'Париж'}
print(len(fruits))      # 3
print(len(capitals))    # 2


# Оператор принадлежности in
# Оператор in позволяет проверить, содержит ли словарь заданный ключ.
capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
if 'Франция' in capitals:
    print('Столица Франции - это', capitals['Франция'])  # Столица Франции - это Париж

# Можно использовать оператор in вместе с логическим оператором not.
# Не забывайте, что при обращении по несуществующему ключу, возникнет ошибка во время выполнения программы.

capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
# print(capitals['Англия'])  # приводит к возникновению ошибки: KeyError: 'Англия'

# Оператор принадлежности in на словарях работает очень быстро, намного быстрее, чем на списках, поэтому если нужен
# многократный поиск в коллекции данных, словарь – подходящий выбор.


# Встроенные функции sum(), min(), max()
# Встроенная функция sum() принимает в качестве аргумента словарь с числовыми ключами и вычисляет сумму его ключей.
my_dict = {10: 'Россия', 20: 'США', 30: 'Франция'}
print('Сумма всех ключей словаря =', sum(my_dict))  # Сумма всех ключей словаря = 60

# Для корректной работы функции sum() ключами словаря должны быть именно числа.

# Встроенные функции min() и max() принимают в качестве аргумента словарь и находят минимальный и максимальный ключ
# соответственно, при этом ключ может принадлежать к любому типу данных, для которого возможны операции порядка
# <, <=, >, >= (числа, строки, и т.д.).

capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
months = {1: 'Январь', 2: 'Февраль', 3: 'Март'}
print('Минимальный ключ =', min(capitals))  # Минимальный ключ = Россия
print('Максимальный ключ =', max(months))   # Максимальный ключ = 3


# Сравнение словарей
# Словари можно сравнивать между собой. Равные словари имеют одинаковое количество элементов и содержат равные элементы
# (ключ: значение). Для сравнения словарей используются операторы == и !=.
months1 = {1: 'Январь', 2: 'Февраль'}
months2 = {1: 'Январь', 2: 'Февраль', 3: 'Март'}
months3 = {3: 'Март', 1: 'Январь', 2: 'Февраль'}
print(months1 == months2)  # False
print(months2 == months3)  # True
print(months1 != months3)  # True


# Примечания
# Примечание 1. Обращение по индексу и срезы недоступны для словарей.

# Примечание 2. Операция конкатенации + и умножения на число * недоступны для словарей.

# Примечание 3. Словари нужно использовать в следующих случаях:
#     * Подсчет числа каких-то объектов. В этом случае нужно завести словарь, в котором ключи — названия объектов,
#       а значения — их количество.
#     * Хранение каких-либо данных, связанных с объектом. Ключи — наименования объектов, значения — связанные с ними
#       данные. Например, если нужно по названию месяца определить его порядковый номер, то это можно сделать при помощи
#       словаря num = {'January': 1, 'February': 2, 'March': 3, ...}.
#     * Установка соответствия между объектами (например, “родитель—потомок”). Ключ — объект, значение — соответствующий
#       ему объект.
#     * Если нужен обычный список, где максимальное значение индекса элемента очень велико, но при этом используются не
#       все возможные индексы (так называемый “разреженный список”), то для экономии памяти можно использовать словарь.

# Примечание 4. О том, как устроен словарь (тип dict) в Python можно почитать в статье.
# https://habr.com/ru/post/432996/

# Примечание 5. Исходный код словаря (тип dict) в Python можно найти тут.
# https://github.com/python/cpython/blob/main/Objects/dictobject.c


# Перебор элементов словаря
# Перебор элементов словаря осуществляется так же как перебор элементов списка, с помощью цикла for.
# Для вывода ключей словаря каждого на отдельной строке можно использовать следующий код:
capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
for key in capitals:
    print(key)

# Для вывода значений словаря каждого на отдельной строке можно использовать следующий код:
capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
for key in capitals:
    print(capitals[key])

# Для вывода элементов словаря каждого на отдельной строке можно использовать следующий код:
capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
for key in capitals:
    print('Столица', key, '- это', capitals[key])


# Методы keys(), values(), items()
# Словарный метод keys() возвращает список ключей всех элементов словаря.
capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
for key in capitals.keys():     # итерируем по списку ['Россия', 'Франция', 'Чехия']
    print(key)

# Словарный метод items() возвращает список всех элементов словаря, состоящий из кортежей пар (ключ, значение).
capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
for item in capitals.items():
    print(item)

# Используя магию распаковки кортежей, можно писать такой код:
capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
for key, value in capitals.items():
    print(key, '-', value)


# Распаковка ключей словаря
# Если требуется вывести только значение ключей словаря, то мы также можем использовать операцию распаковки словаря.
capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
print(*capitals, sep='\n')

# Начиная с версии Python 3.6 словари являются упорядоченными, то есть сохраняют порядок следования ключей в порядке их
# внесения в словарь.


# Сортировка словаря
# Так как словарь состоит из пар, то и отсортировать его можно как по ключам, так и по значениям.
# Сортировка по ключам выполняется с использованием функции sorted().
capitals = {'Россия': 'Москва', 'Англия': 'Лондон', 'Чехия': 'Прага', 'Бразилия':'Бразилиа'}
for key in sorted(capitals):
    print(key)

# Обратите внимание: функция sorted() возвращает отсортированный список ключей, а не словарь. Не путайте встроенную
# функцию sorted() и списочный метод sort(). Словари не содержат метода sort().

# Для сортировки словаря по значениям можно использовать функцию sorted() вместе с методом items().
capitals = {'Россия': 'Москва', 'Англия': 'Лондон', 'Чехия': 'Прага', 'Бразилия':'Бразилиа'}
for key, value in sorted(capitals.items(), key = lambda x: x[1]):
    print(value)

# Стоит учитывать, что sorted(capitals.items(), key= lambda x: x[1]) возвращает не словарь, а отсортированный
# по значению список кортежей.

# При сортировке словаря по значениям, мы используем анонимную функцию lambda x: x[1], о ней будет рассказано
# в следующих уроках.


# Примечания
# Примечание 1. Как мы уже знаем, с помощью оператора принадлежности in можно быстро проверить наличие ключа в словаре.
# Для проверки наличия значения в словаре можно использовать оператор in вместе с методом values(), который возвращает
# список всех значений словаря.

# Проверка наличия ключа в словаре:
capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
if 'Россия' in capitals:
    print('В словаре есть ключ Россия')

# Проверка наличия значения в словаре:
capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}
if 'Париж' in capitals.values():
    print('В словаре есть значение Париж')

# Примечание 2. Встроенная функция sorted() имеет опциональный параметр reverse. Если установить этот параметр в
# значение True, то сортировка будет по убыванию.

# Примечание 3. Код для работы со словарями нужно писать таким образом, чтобы он правильно работал при любом порядке
# обхода с помощью цикла for.

# Примечание 4. Словарные методы items(), keys(), values() возвращают не совсем обычные списки. Типы этих
# списков - dict_items, dict_keys, dict_values соответственно, в отличие от обычных списков - list. Методы обычных
# списков недоступны для списков типа dict_items, dict_keys, dict_values. Используйте явное преобразование с помощью
# функции list() для получения доступа к методам списков.
